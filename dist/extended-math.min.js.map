{"version":3,"sources":["extended-math.min.js"],"names":["global","factory","exports","module","define","amd","extendedMath","this","isInvalidNumber","value","isNaN","Infinity","HalfPI","QuarterPI","TwoPI","clamp","min","max","NaN","distance","a","b","Math","abs","radiansToDegrees","PI","degreesToRadians","compareAnglesDegrees","c","d","cos","compareAnglesRadians","lerp","amount","normalize"],"mappings":"CAAC,SAASA,OAAQC,SACE,iBAAZC,SAA0C,oBAAXC,OAAyBA,OAAOD,QAAUD,UAC9D,mBAAXG,QAAyBA,OAAOC,IAAMD,OAAOH,SACnDD,OAAOM,aAAeL,UAHxB,CAIGM,KAAM,WAER,aAEA,IAAID,aAAe,GAEnB,SAASE,gBAAgBC,OACxB,MAAwB,iBAAVA,OAAsBC,MAAMD,QAAUA,SAAWE,EAAAA,GAAYF,QAAUE,EAAAA,EAyEtF,OAtEAL,aAAaM,OAAS,mBACtBN,aAAaO,UAAY,kBACzBP,aAAaQ,MAAQ,kBAErBR,aAAaS,MAAQ,SAASN,MAAOO,IAAKC,KACzC,OAAOT,gBAAgBC,QAAUD,gBAAgBQ,MAAQR,gBAAgBS,KAAOC,IAAMT,MAAQO,IAAMA,IAAcC,IAARR,MAAcQ,IAAMR,OAG/HH,aAAaa,SAAW,SAASC,EAAGC,GACnC,OAAOb,gBAAgBY,IAAMZ,gBAAgBa,GAAKH,IAAMI,KAAKC,IAAIF,EAAID,IAGtEd,aAAakB,iBAAmB,SAASf,OACxC,OAAOD,gBAAgBC,OAASS,IAAMT,OAAS,IAAMa,KAAKG,KAG3DnB,aAAaoB,iBAAmB,SAASjB,OACxC,OAAOD,gBAAgBC,OAASS,IAAMT,OAASa,KAAKG,GAAK,MAG1DnB,aAAaqB,qBAAuB,SAASP,EAAGC,GAC/C,GAAGb,gBAAgBY,IAAMZ,gBAAgBa,GACxC,OAAOH,IAGR,GAAGE,IAAMC,EACR,OAAO,EAGR,IAAIO,EAAIR,EAAI,IACRS,EAAIR,EAAI,IAUZ,OARGO,EAAI,IACNA,GAAK,KAGHC,EAAI,IACNA,GAAK,KAGHD,IAAMC,EACD,EAGDP,KAAKQ,IAAIxB,aAAaoB,iBAAiBN,EAAIC,GAAMC,KAAKG,GAAK,GAAM,GAAK,EAAI,GAGlFnB,aAAayB,qBAAuB,SAASX,EAAGC,GAC/C,OAAOb,gBAAgBY,IAAMZ,gBAAgBa,GAAKH,IAAMZ,aAAaqB,qBAAqBrB,aAAakB,iBAAiBJ,GAAId,aAAakB,iBAAiBH,KAG3Jf,aAAa0B,KAAO,SAASZ,EAAGC,EAAGY,QAClC,OAAGzB,gBAAgBY,IAAMZ,gBAAgBa,IAAMb,gBAAgByB,QACvDf,IAGM,IAAXe,OACKb,EAEW,IAAXa,OACAZ,EAGDD,GAAKC,EAAID,GAAKa,QAGtB3B,aAAa4B,UAAY,SAASzB,MAAOO,IAAKC,KAC7C,OAAOT,gBAAgBC,QAAUD,gBAAgBQ,MAAQR,gBAAgBS,KAAOC,KAAOT,MAAQO,MAAQC,IAAMD,MAGvGV","file":"extended-math.min.js","sourcesContent":["(function(global, factory) {\n\ttypeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory() :\n\ttypeof define === \"function\" && define.amd ? define(factory) :\n\t(global.extendedMath = factory());\n} (this, function() {\n\n\t\"use strict\";\n\n\tvar extendedMath = { };\n\n\tfunction isInvalidNumber(value) {\n\t\treturn typeof value !== \"number\" || isNaN(value) || value === -Infinity || value === Infinity;\n\t}\n\n\textendedMath.HalfPI = 1.57079632679489661923;\n\textendedMath.QuarterPI = 0.78539816339744830962;\n\textendedMath.TwoPI = 6.28318530717958647693;\n\n\textendedMath.clamp = function(value, min, max) {\n\t\treturn isInvalidNumber(value) || isInvalidNumber(min) || isInvalidNumber(max) ? NaN : value < min ? min : value > max ? max : value;\n\t};\n\n\textendedMath.distance = function(a, b) {\n\t\treturn isInvalidNumber(a) || isInvalidNumber(b) ? NaN : Math.abs(b - a);\n\t};\n\n\textendedMath.radiansToDegrees = function(value) {\n\t\treturn isInvalidNumber(value) ? NaN : value * (180 / Math.PI);\n\t};\n\n\textendedMath.degreesToRadians = function(value) {\n\t\treturn isInvalidNumber(value) ? NaN : value * (Math.PI / 180);\n\t};\n\n\textendedMath.compareAnglesDegrees = function(a, b) {\n\t\tif(isInvalidNumber(a) || isInvalidNumber(b)) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\tif(a === b) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar c = a % 360;\n\t\tvar d = b % 360;\n\n\t\tif(c < 0) {\n\t\t\tc += 360;\n\t\t}\n\n\t\tif(d < 0) {\n\t\t\td += 360;\n\t\t}\n\n\t\tif(c === d) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn Math.cos(extendedMath.degreesToRadians(a - b) + (Math.PI / 2)) < 0 ? -1 : 1;\n\t};\n\n\textendedMath.compareAnglesRadians = function(a, b) {\n\t\treturn isInvalidNumber(a) || isInvalidNumber(b) ? NaN : extendedMath.compareAnglesDegrees(extendedMath.radiansToDegrees(a), extendedMath.radiansToDegrees(b));\n\t};\n\n\textendedMath.lerp = function(a, b, amount) {\n\t\tif(isInvalidNumber(a) || isInvalidNumber(b) || isInvalidNumber(amount)) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\tif(amount === 0) {\n\t\t\treturn a;\n\t\t}\n\t\telse if(amount === 1) {\n\t\t\treturn b;\n\t\t}\n\n\t\treturn a + (b - a) * amount;\n\t};\n\n\textendedMath.normalize = function(value, min, max) {\n\t\treturn isInvalidNumber(value) || isInvalidNumber(min) || isInvalidNumber(max) ? NaN : (value - min) / (max - min);\n\t};\n\n\treturn extendedMath;\n\n}));\n\n//# sourceMappingURL=extended-math.js.map\n"]}