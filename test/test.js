"use strict";

global.utilities = undefined;

const extendedMath = require("../src/extended-math.js");
const utilities = require("extra-utilities");
const chai = require("chai");
const expect = chai.expect;

const testDate = new Date();

const emptyFunction = function() { };

const testRegExp = new RegExp(".+");

const invalidTestData = [
	undefined,
	null,
	false,
	true,
	new Boolean(false),
	new Boolean(true),
	0,
	NaN,
	Infinity,
	-Infinity,
	"",
	"test",
	" trim\t",
	{ },
	{ nice: "meme" },
	[ ],
	[0],
	testDate,
	emptyFunction,
	testRegExp
];

const validTestData = [
	-180,
	-7,
	-extendedMath.HalfPI,
	-1,
	0,
	1,
	extendedMath.TwoPI,
	7,
	360
];

describe("Extended Math", function() {
	describe("HalfPI", function() {
		it("should be a valid number", function() {
			expect(utilities.isValidNumber(extendedMath.HalfPI)).to.equal(true);
		});

		it("should contain the correct value", function() {
			expect(extendedMath.HalfPI).to.equal(Math.PI / 2);
		});
	});

	describe("QuarterPI", function() {
		it("should be a valid number", function() {
			expect(utilities.isValidNumber(extendedMath.QuarterPI)).to.equal(true);
		});

		it("should contain the correct value", function() {
			expect(extendedMath.QuarterPI).to.equal(Math.PI / 4);
		});
	});

	describe("TwoPI", function() {
		it("should be a valid number", function() {
			expect(utilities.isValidNumber(extendedMath.TwoPI)).to.equal(true);
		});

		it("should contain the correct value", function() {
			expect(extendedMath.TwoPI).to.equal(Math.PI * 2);
		});
	});

	describe("clamp", function() {
		it("should be a function", function() {
			expect(extendedMath.clamp instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				expect(extendedMath.clamp(invalidTestData[i])).to.be.NaN;

				for(let j = 0; j < invalidTestData.length; j++) {
					expect(extendedMath.clamp(invalidTestData[i], invalidTestData[j])).to.be.NaN;

					for(let k = 0; k < invalidTestData.length; k++) {
						if(invalidTestData[i] === 0 && invalidTestData[j] === 0 && invalidTestData[k] === 0) {
							continue;
						}

						expect(extendedMath.clamp(invalidTestData[i], invalidTestData[j], invalidTestData[k])).to.be.NaN;
					}
				}
			}
		});

		it("should return the correct value for any combination of valid arguments", function() {
			const results = [
				[
					[-180, -180, -180, -180, -180, -180, -180, -180, -180],
					[-7, -7, -7, -7, -7, -7, -7, -7, -7],
					[-1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966],
					[-1, -1, -1, -1, -1, -1, -1, -1, -1],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1, 1, 1, 1, 1],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -7, -7, -7, -7, -7, -7, -7],
					[-180, -7, -7, -7, -7, -7, -7, -7, -7],
					[-1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966],
					[-1, -1, -1, -1, -1, -1, -1, -1, -1],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1, 1, 1, 1, 1],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966],
					[-180, -7, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966],
					[-180, -7, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966],
					[-1, -1, -1, -1, -1, -1, -1, -1, -1],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1, 1, 1, 1, 1],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1, -1, -1, -1, -1, -1],
					[-180, -7, -1.5707963267948966, -1, -1, -1, -1, -1, -1],
					[-180, -7, -1.5707963267948966, -1, -1, -1, -1, -1, -1],
					[-180, -7, -1.5707963267948966, -1, -1, -1, -1, -1, -1],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1, 1, 1, 1, 1],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1, 0, 0, 0, 0, 0],
					[-180, -7, -1.5707963267948966, -1, 0, 0, 0, 0, 0],
					[-180, -7, -1.5707963267948966, -1, 0, 0, 0, 0, 0],
					[-180, -7, -1.5707963267948966, -1, 0, 0, 0, 0, 0],
					[-180, -7, -1.5707963267948966, -1, 0, 0, 0, 0, 0],
					[1, 1, 1, 1, 1, 1, 1, 1, 1],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1, 0, 1, 1, 1, 1],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 1, 1, 1],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 1, 1, 1],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 1, 1, 1],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 1, 1, 1],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 1, 1, 1],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 7],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				],
				[
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360]
				]
			];

			for(let i = 0; i < validTestData.length; i++) {
				for(let j = 0; j < validTestData.length; j++) {
					for(let k = 0; k < validTestData.length; k++) {
						if(isNaN(results[i][j][k])) {
							expect(extendedMath.clamp(validTestData[i], validTestData[j], validTestData[k])).to.be.NaN;
						}
						else {
							expect(extendedMath.clamp(validTestData[i], validTestData[j], validTestData[k])).to.equal(results[i][j][k]);
						}
					}
				}
			}
		});
	});

	describe("distance", function() {
		it("should be a function", function() {
			expect(extendedMath.distance instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				expect(extendedMath.distance(invalidTestData[i])).to.be.NaN;

				for(let j = 0; j < invalidTestData.length; j++) {
					if(invalidTestData[i] === 0 && invalidTestData[j] === 0) {
						continue;
					}

					expect(extendedMath.distance(invalidTestData[i], invalidTestData[j])).to.be.NaN;
				}
			}
		});

		it("should return the correct value for any combination of valid arguments", function() {
			const results = [
				[0, 173, 178.4292036732051, 179, 180, 181, 186.2831853071796, 187, 540],
				[173, 0, 5.429203673205103, 6, 7, 8, 13.283185307179586, 14, 367],
				[178.4292036732051, 5.429203673205103, 0, 0.5707963267948966, 1.5707963267948966, 2.5707963267948966, 7.853981633974483, 8.570796326794897, 361.5707963267949],
				[179, 6, 0.5707963267948966, 0, 1, 2, 7.283185307179586, 8, 361],
				[180, 7, 1.5707963267948966, 1, 0, 1, 6.283185307179586, 7, 360],
				[181, 8, 2.5707963267948966, 2, 1, 0, 5.283185307179586, 6, 359],
				[186.2831853071796, 13.283185307179586, 7.853981633974483, 7.283185307179586, 6.283185307179586, 5.283185307179586, 0, 0.7168146928204138, 353.71681469282044],
				[187, 14, 8.570796326794897, 8, 7, 6, 0.7168146928204138, 0, 353],
				[540, 367, 361.5707963267949, 361, 360, 359, 353.71681469282044, 353, 0]
			];

			for(let i = 0; i < validTestData.length; i++) {
				for(let j = 0; j < validTestData.length; j++) {
					if(isNaN(results[i][j])) {
						expect(extendedMath.distance(validTestData[i], validTestData[j])).to.be.NaN;
					}
					else {
						expect(extendedMath.distance(validTestData[i], validTestData[j])).to.equal(results[i][j]);
					}
				}
			}
		});
	});

	describe("radiansToDegrees", function() {
		it("should be a function", function() {
			expect(extendedMath.radiansToDegrees instanceof Function).to.equal(true);
		});

		it("should return NaN for any invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				if(invalidTestData[i] === 0) {
					continue;
				}

				expect(extendedMath.radiansToDegrees(invalidTestData[i])).to.be.NaN;
			}
		});

		it("should return the correct value for any valid arguments", function() {
			const results = [-10313.240312354817, -401.07045659157626, -90, -57.29577951308232, 0, 57.29577951308232, 360, 401.07045659157626, 20626.480624709635];

			for(let i = 0; i < validTestData.length; i++) {
				if(isNaN(results[i])) {
					expect(extendedMath.radiansToDegrees(validTestData[i])).to.be.NaN;
				}
				else {
					expect(extendedMath.radiansToDegrees(validTestData[i])).to.equal(results[i]);
				}
			}
		});
	});

	describe("degreesToRadians", function() {
		it("should be a function", function() {
			expect(extendedMath.degreesToRadians instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				if(invalidTestData[i] === 0) {
					continue;
				}

				expect(extendedMath.degreesToRadians(invalidTestData[i])).to.be.NaN;
			}
		});

		it("should return the correct value for any valid arguments", function() {
			const results = [-3.141592653589793, -0.12217304763960307, -0.027415567780803774, -0.017453292519943295, 0, 0.017453292519943295, 0.1096622711232151, 0.12217304763960307, 6.283185307179586];

			for(let i = 0; i < validTestData.length; i++) {
				if(isNaN(results[i])) {
					expect(extendedMath.degreesToRadians(validTestData[i])).to.be.NaN;
				}
				else {
					expect(extendedMath.degreesToRadians(validTestData[i])).to.equal(results[i]);
				}
			}
		});
	});

	describe("compareAnglesDegrees", function() {
		it("should be a function", function() {
			expect(extendedMath.compareAnglesDegrees instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				expect(extendedMath.compareAnglesDegrees(invalidTestData[i])).to.be.NaN;

				for(let j = 0; j < invalidTestData.length; j++) {
					if(invalidTestData[i] === 0 && invalidTestData[j] === 0) {
						continue;
					}

					expect(extendedMath.compareAnglesDegrees(invalidTestData[i], invalidTestData[j])).to.be.NaN;
				}
			}
		});

		it("should return the correct value for any combination of valid arguments", function() {
			const results = [
				[ 0,  1,  1,  1,  1, -1, -1, -1,  1],
				[-1,  0,  1,  1,  1,  1,  1,  1,  1],
				[-1, -1,  0,  1,  1,  1,  1,  1,  1],
				[-1, -1, -1,  0,  1,  1,  1,  1,  1],
				[-1, -1, -1, -1,  0,  1,  1,  1,  0],
				[ 1, -1, -1, -1, -1,  0,  1,  1, -1],
				[ 1, -1, -1, -1, -1, -1,  0,  1, -1],
				[ 1, -1, -1, -1, -1, -1, -1,  0, -1],
				[-1, -1, -1, -1,  0,  1,  1,  1,  0]
			];

			for(let i = 0; i < validTestData.length; i++) {
				for(let j = 0; j < validTestData.length; j++) {
					if(isNaN(results[i][j])) {
						expect(extendedMath.compareAnglesDegrees(validTestData[i], validTestData[j])).to.be.NaN;
					}
					else {
						expect(extendedMath.compareAnglesDegrees(validTestData[i], validTestData[j])).to.equal(results[i][j]);
					}
				}
			}
		});
	});

	describe("compareAnglesRadians", function() {
		it("should be a function", function() {
			expect(extendedMath.compareAnglesRadians instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				expect(extendedMath.compareAnglesRadians(invalidTestData[i])).to.be.NaN;

				for(let j = 0; j < invalidTestData.length; j++) {
					if(invalidTestData[i] === 0 && invalidTestData[j] === 0) {
						continue;
					}

					expect(extendedMath.compareAnglesRadians(invalidTestData[i], invalidTestData[j])).to.be.NaN;
				}
			}
		});

		it("should return the correct value for any combination of valid arguments", function() {
			const results = [
				[ 0, -1,  1,  1, -1, -1, -1, -1, -1],
				[ 1,  0, -1, -1,  1,  1,  1,  1,  1],
				[-1,  1,  0,  1,  1,  1,  1,  1, -1],
				[-1,  1, -1,  0,  1,  1,  1,  1,  1],
				[ 1, -1, -1, -1,  0,  1,  0,  1,  1],
				[ 1, -1, -1, -1, -1,  0, -1, -1,  1],
				[ 1, -1, -1, -1,  0,  1,  0,  1,  1],
				[ 1, -1, -1, -1, -1,  1, -1,  0,  1],
				[ 1, -1,  1, -1, -1, -1, -1, -1,  0]
			];

			for(let i = 0; i < validTestData.length; i++) {
				for(let j = 0; j < validTestData.length; j++) {
					if(isNaN(results[i][j])) {
						expect(extendedMath.compareAnglesRadians(validTestData[i], validTestData[j])).to.be.NaN;
					}
					else {
						expect(extendedMath.compareAnglesRadians(validTestData[i], validTestData[j])).to.equal(results[i][j]);
					}
				}
			}
		});
	});

	describe("lerp", function() {
		it("should be a function", function() {
			expect(extendedMath.lerp instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				expect(extendedMath.lerp(invalidTestData[i])).to.be.NaN;

				for(let j = 0; j < invalidTestData.length; j++) {
					expect(extendedMath.lerp(invalidTestData[i], invalidTestData[j])).to.be.NaN;

					for(let k = 0; k < invalidTestData.length; k++) {
						if(invalidTestData[i] === 0 && invalidTestData[j] === 0 && invalidTestData[k] === 0) {
							continue;
						}

						expect(extendedMath.lerp(invalidTestData[i], invalidTestData[j], invalidTestData[k])).to.be.NaN;
					}
				}
			}
		});

		it("should return the correct value for any combination of valid arguments", function() {
			const results = [
				[
					[-180, -180, -180, -180, -180, -180, -180, -180, -180],
					[-31320, -1391, -451.7477645355171, -353, -180, -7, 906.9910581420684, 1031, 62100],
					[-32297.256661176918, -1429.0044257124357, -460.27593772280903, -358.4292036732051, -180, -1.5707963267948966, 941.1037508912361, 1069.0044257124357, 64054.513322353836],
					[-32400, -1433, -461.1725424962865, -359, -180, -1, 944.690169985146, 1073, 64260],
					[-32580, -1440, -462.7433388230814, -360, -180, 0, 950.9733552923256, 1080, 64620],
					[-32760, -1447, -464.3141351498763, -361, -180, 1, 957.2565405995051, 1087, 64980],
					[-33710.97335529233, -1483.9822971502572, -472.61294322417075, -366.28318530717956, -180, 6.283185307179586, 990.451772896683, 1123.9822971502572, 66881.94671058466],
					[-33840, -1489, -473.7389131106457, -367, -180, 7, 994.9556524425827, 1129, 67140],
					[-97380, -3960, -1028.2300164692442, -720, -180, 360, 3212.9200658769764, 3600, 194220]
				],
				[
					[31133, 1204, 264.7477645355171, 166, -7, -180, -1093.9910581420684, -1218, -62287],
					[-7, -7, -7, -7, -7, -7, -7, -7, -7],
					[-984.2566611769187, -45.004425712435726, -15.528173187291937, -12.429203673205103, -7, -1.5707963267948966, 27.11269274916775, 31.004425712435726, 1947.5133223538373],
					[-1087, -49, -16.42477796076938, -13, -7, -1, 30.699111843077517, 35, 2153],
					[-1267, -56, -17.995574287564274, -14, -7, 0, 36.982297150257104, 42, 2513],
					[-1447, -63, -19.566370614359172, -15, -7, 1, 43.26548245743669, 49, 2873],
					[-2397.9733552923253, -99.9822971502571, -27.865178688653632, -20.283185307179586, -7, 6.283185307179586, 76.46071475461453, 85.9822971502571, 4774.946710584651],
					[-2527, -105, -28.991148575128552, -21, -7, 7, 80.96459430051421, 91, 5033],
					[-66067, -2576, -583.4822519337271, -374, -7, 360, 2298.9290077349083, 2562, 132113]
				],
				[
					[32115.685864850122, 1247.4336293856409, 278.70514139601414, 176.85840734641022, -1.5707963267948966, -180, -1122.674547218031, -1250.5752220392305, -64236.08411868063],
					[975.6858648501237, 36.43362938564083, 6.957376860497041, 3.858407346410207, -1.5707963267948966, -7, -35.68348907596265, -39.575222039230624, -1956.0841186806322],
					[-1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966, -1.5707963267948966],
					[-104.31413514987628, -5.5663706143591725, -2.4674011002723395, -2.141592653589793, -1.5707963267948966, -1, 2.015622767114875, 2.4247779607693793, 203.91588131936788],
					[-284.3141351498763, -12.566370614359172, -4.038197427067236, -3.141592653589793, -1.5707963267948966, 0, 8.298808074294461, 9.42477796076938, 563.9158813193678],
					[-464.3141351498763, -19.566370614359172, -5.608993753862133, -4.141592653589793, -1.5707963267948966, 1, 14.581993381474048, 16.424777960769376, 923.9158813193678],
					[-1415.2874904422017, -56.548667764616276, -13.907801828156593, -9.42477796076938, -1.5707963267948966, 6.283185307179586, 47.77722567865189, 53.40707511102648, 2825.8625919040187],
					[-1544.3141351498762, -61.56637061435917, -15.033771714631511, -10.141592653589793, -1.5707963267948966, 7, 52.28110522455156, 58.424777960769376, 3083.9158813193676],
					[-65084.31413514987, -2532.566370614359, -569.5248750732301, -363.1415926535898, -1.5707963267948966, 360, 2270.2455186589455, 2529.424777960769, 130163.91588131936]
				],
				[
					[32219, 1252, 280.1725424962865, 178, -1, -180, -1125.690169985146, -1254, -64441],
					[1079, 41, 8.42477796076938, 5, -1, -7, -38.69911184307752, -43, -2161],
					[101.74333882308139, 2.995574287564276, -0.10339522652255706, -0.42920367320510344, -1, -1.5707963267948966, -4.586419093909772, -4.995574287564276, -206.48667764616278],
					[-1, -1, -1, -1, -1, -1, -1, -1, -1],
					[-181, -8, -2.5707963267948966, -2, -1, 0, 5.283185307179586, 6, 359],
					[-361, -15, -4.141592653589793, -3, -1, 1, 11.566370614359172, 13, 719],
					[-1311.9733552923256, -51.982297150257104, -12.440400727884255, -8.283185307179586, -1, 6.283185307179586, 44.76160291153702, 49.982297150257104, 2620.946710584651],
					[-1441, -57, -13.566370614359172, -9, -1, 7, 49.26548245743669, 55, 2879],
					[-64981, -2528, -568.0574739729576, -362, -1, 360, 2267.2298958918304, 2526, 129959]
				],
				[
					[32400, 1260, 282.7433388230814, 180, 0, -180, -1130.9733552923256, -1260, -64800],
					[1260, 49, 10.995574287564276, 7, 0, -7, -43.982297150257104, -49, -2520],
					[282.7433388230814, 10.995574287564276, 2.4674011002723395, 1.5707963267948966, 0, -1.5707963267948966, -9.869604401089358, -10.995574287564276, -565.4866776461628],
					[180, 7, 1.5707963267948966, 1, 0, -1, -6.283185307179586, -7, -360],
					[0, 0, 0, 0, 0, 0, 0, 0, 0],
					[-180, -7, -1.5707963267948966, -1, 0, 1, 6.283185307179586, 7, 360],
					[-1130.9733552923256, -43.982297150257104, -9.869604401089358, -6.283185307179586, 0, 6.283185307179586, 39.47841760435743, 43.982297150257104, 2261.946710584651],
					[-1260, -49, -10.995574287564276, -7, 0, 7, 43.982297150257104, 49, 2520],
					[-64800, -2520, -565.4866776461628, -360, 0, 360, 2261.946710584651, 2520, 129600]
				],
				[
					[32581, 1268, 285.3141351498763, 182, 1, -180, -1136.2565405995051, -1266, -65159],
					[1441, 57, 13.566370614359172, 9, 1, -7, -49.26548245743669, -55, -2879],
					[463.7433388230814, 18.995574287564274, 5.038197427067236, 3.5707963267948966, 1, -1.5707963267948966, -15.152789708268944, -16.995574287564274, -924.4866776461628],
					[361, 15, 4.141592653589793, 3, 1, -1, -11.566370614359172, -13, -719],
					[181, 8, 2.5707963267948966, 2, 1, 0, -5.283185307179586, -6, -359],
					[1, 1, 1, 1, 1, 1, 1, 1, 1],
					[-949.9733552923256, -35.982297150257104, -7.298808074294461, -4.283185307179586, 1, 6.283185307179586, 34.195232297177846, 37.982297150257104, 1902.946710584651],
					[-1079, -41, -8.42477796076938, -5, 1, 7, 38.69911184307752, 43, 2161],
					[-64619, -2512, -562.9158813193678, -358, 1, 360, 2256.6635252774713, 2514, 129241]
				],
				[
					[33537.256540599505, 1310.2654824574367, 298.8961285313503, 192.5663706143592, 6.283185307179586, -180, -1164.1685875895034, -1297.6991118430776, -67055.66352527747],
					[2397.256540599505, 99.26548245743669, 27.14836399583322, 19.566370614359172, 6.283185307179586, -7, -77.17752944743495, -86.6991118430775, -4775.663525277471],
					[1419.9998794225864, 61.261056745000964, 18.62019080854128, 14.137166941154069, 6.283185307179586, -1.5707963267948966, -43.0648366982672, -48.69468613064179, -2821.150202923634],
					[1317.2565405995051, 57.26548245743669, 17.72358603506384, 13.566370614359172, 6.283185307179586, -1, -39.47841760435743, -44.69911184307752, -2615.6635252774713],
					[1137.2565405995051, 50.26548245743669, 16.152789708268944, 12.566370614359172, 6.283185307179586, 0, -33.195232297177846, -37.69911184307752, -2255.6635252774713],
					[957.2565405995051, 43.26548245743669, 14.581993381474048, 11.566370614359172, 6.283185307179586, 1, -26.91204698999826, -30.699111843077517, -1895.6635252774715],
					[6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586],
					[-122.74345940049488, 1.2654824574366899, 5.157215420704668, 5.5663706143591725, 6.283185307179586, 7, 10.787064853079258, 11.300888156922483, 264.3364747225285],
					[-63662.7434594005, -2469.734517542563, -549.3338879378939, -347.43362938564087, 6.283185307179586, 360, 2228.7514782874737, 2482.3008881569226, 127344.33647472254]
				],
				[
					[33667, 1316, 300.7389131106457, 194, 7, -180, -1167.9556524425827, -1302, -67313],
					[2527, 105, 28.991148575128552, 21, 7, -7, -80.96459430051421, -91, -5033],
					[1549.7433388230813, 66.99557428756427, 20.462975387836615, 15.570796326794897, 7, -1.5707963267948966, -46.85190155134646, -52.995574287564274, -3078.4866776461627],
					[1447, 63, 19.566370614359172, 15, 7, -1, -43.26548245743669, -49, -2873],
					[1267, 56, 17.995574287564274, 14, 7, 0, -36.982297150257104, -42, -2513],
					[1087, 49, 16.42477796076938, 13, 7, 1, -30.699111843077517, -35, -2153],
					[136.02664470767448, 12.017702849742896, 8.125969886474918, 7.716814692820414, 7, 6.283185307179586, 2.4961204541003275, 1.9822971502571036, -251.05328941534896],
					[7, 7, 7, 7, 7, 7, 7, 7, 7],
					[-63533, -2464, -547.4911033585985, -346, 7, 360, 2224.964413434394, 2478, 127087]
				],
				[
					[97560, 4140, 1208.2300164692442, 900, 360, -180, -3032.9200658769764, -3420, -194040],
					[66420, 2929, 936.4822519337271, 727, 360, -7, -1945.9290077349083, -2209, -131760],
					[65442.74333882308, 2890.995574287564, 927.9540787464351, 721.5707963267948, 360, -1.5707963267948966, -1911.8163149857405, -2170.995574287564, -129805.48667764616],
					[65340, 2887, 927.0574739729576, 721, 360, -1, -1908.2298958918304, -2167, -129600],
					[65160, 2880, 925.4866776461628, 720, 360, 0, -1901.946710584651, -2160, -129240],
					[64980, 2873, 923.9158813193678, 719, 360, 1, -1895.6635252774713, -2153, -128880],
					[64029.02664470768, 2836.017702849743, 915.6170732450735, 713.7168146928204, 360, 6.283185307179586, -1862.4682929802939, -2116.017702849743, -126978.05328941536],
					[63900, 2831, 914.4911033585985, 713, 360, 7, -1857.964413434394, -2111, -126720],
					[360, 360, 360, 360, 360, 360, 360, 360, 360]
				]
			];

			for(let i = 0; i < validTestData.length; i++) {
				for(let j = 0; j < validTestData.length; j++) {
					for(let k = 0; k < validTestData.length; k++) {
						if(isNaN(results[i][j][k])) {
							expect(extendedMath.lerp(validTestData[i], validTestData[j], validTestData[k])).to.be.NaN;
						}
						else {
							expect(extendedMath.lerp(validTestData[i], validTestData[j], validTestData[k])).to.equal(results[i][j][k]);
						}
					}
				}
			}
		});
	});

	describe("normalize", function() {
		it("should be a function", function() {
			expect(extendedMath.normalize instanceof Function).to.equal(true);
		});

		it("should return NaN for any combination of invalid arguments", function() {
			for(let i = 0; i < invalidTestData.length; i++) {
				expect(extendedMath.normalize(invalidTestData[i])).to.be.NaN;

				for(let j = 0; j < invalidTestData.length; j++) {
					expect(extendedMath.normalize(invalidTestData[i], invalidTestData[j])).to.be.NaN;

					for(let k = 0; k < invalidTestData.length; k++) {
						if(invalidTestData[i] === 0 && invalidTestData[j] === 0 && invalidTestData[k] === 0) {
							continue;
						}

						expect(extendedMath.normalize(invalidTestData[i], invalidTestData[j], invalidTestData[k])).to.be.NaN;
					}
				}
			}
		});

		it("should return the correct value for any combination of valid arguments", function() {
			const results = [
				[
					[NaN, 0, 0, 0, 0, 0, 0, 0, 0],
					[1, -Infinity, -31.864709893609554, -28.833333333333332, -24.714285714285715, -21.625, -13.023984533776938, -12.357142857142858, -0.4713896457765668],
					[1, 32.86470989360956, -Infinity, -312.5969725052555, -113.59155902616465, -69.40619986635004, -22.71831180523293, -20.818276023592063, -0.49348344912219416],
					[1, 29.833333333333332, 313.5969725052555, -Infinity, -179, -89.5, -24.577158544015923, -22.375, -0.49584487534626037],
					[1, 25.714285714285715, 114.59155902616465, 180, -Infinity, -180, -28.64788975654116, -25.714285714285715, -0.5],
					[1, 22.625, 70.40619986635004, 90.5, 181, -Infinity, -34.25963495053448, -30.166666666666668, -0.5041782729805014],
					[1, 14.02398453377694, 23.71831180523293, 25.577158544015923, 29.64788975654116, 35.25963495053448, -Infinity, -259.8763490382999, -0.52664498143509],
					[1, 13.357142857142858, 21.818276023592063, 23.375, 26.714285714285715, 31.166666666666668, 260.8763490382999, -Infinity, -0.5297450424929179],
					[1, 1.4713896457765667, 1.4934834491221942, 1.4958448753462603, 1.5, 1.5041782729805013, 1.52664498143509, 1.5297450424929178, -Infinity]
				],
				[
					[Infinity, 1, 0.9695722249416707, 0.9664804469273743, 0.9611111111111111, 0.9558011049723757, 0.9286935893581821, 0.9251336898395722, 0.32037037037037036],
					[0, NaN, 0, 0, 0, 0, 0, 0, 0],
					[0.03042777505832927, 1, -Infinity, -9.511630363304652, -3.4563384065730696, -2.111876237186742, -0.6912676813146139, -0.6334538199480687, -0.0150156033848986],
					[0.0335195530726257, 1, 10.511630363304652, -Infinity, -6, -3, -0.8238153701904779, -0.75, -0.01662049861495845],
					[0.03888888888888889, 1, 4.45633840657307, 7, -Infinity, -7, -1.1140846016432675, -1, -0.019444444444444445],
					[0.04419889502762431, 1, 3.111876237186742, 4, 8, -Infinity, -1.5142380088634024, -1.3333333333333333, -0.022284122562674095],
					[0.0713064106418178, 1, 1.691267681314614, 1.8238153701904778, 2.1140846016432673, 2.5142380088634027, -Infinity, -18.530849660621385, -0.03755316330866303],
					[0.0748663101604278, 1, 1.6334538199480688, 1.75, 2, 2.3333333333333335, 19.530849660621385, -Infinity, -0.039660056657223795],
					[0.6796296296296296, 1, 1.0150156033848987, 1.0166204986149585, 1.0194444444444444, 1.0222841225626742, 1.037553163308663, 1.0396600566572238, -Infinity]
				],
				[
					[Infinity, 1.031382680191937, 1, 0.9968111937050564, 0.9912733537400283, 0.9857967053768238, 0.9578384832693121, 0.9541668645625941, 0.33042445124667613],
					[-0.03138268019193701, Infinity, 1, 0.9048672788675173, 0.7756005247435862, 0.6786504591506379, 0.40872754144825557, 0.3878002623717931, 0.014793470499196467],
					[0, 0, NaN, 0, 0, 0, 0, 0, 0],
					[0.0031888062949435563, 0.09513272113248276, 1, -Infinity, -0.5707963267948966, -0.2853981633974483, -0.07837179787698378, -0.07134954084936207, -0.001581153259819658],
					[0.008726646259971648, 0.2243994752564138, 1, 1.5707963267948966, -Infinity, -1.5707963267948966, -0.25, -0.2243994752564138, -0.004363323129985824],
					[0.014203294623176224, 0.32134954084936207, 1, 1.2853981633974483, 2.5707963267948966, -Infinity, -0.4865996888849066, -0.4284660544658161, -0.00716099255374623],
					[0.04216151673068788, 0.5912724585517445, 1, 1.0783717978769838, 1.25, 1.4865996888849067, -Infinity, -10.956781037888366, -0.022204151195908354],
					[0.045833135437405866, 0.6121997376282069, 1, 1.071349540849362, 1.2243994752564138, 1.428466054465816, 11.956781037888366, -Infinity, -0.02427987627987223],
					[0.6695755487533239, 0.9852065295008036, 1, 1.0015811532598196, 1.0043633231299858, 1.0071609925537461, 1.0222041511959084, 1.0242798762798722, -Infinity]
				],
				[
					[Infinity, 1.0346820809248556, 1.00319900730959, 1, 0.9944444444444445, 0.988950276243094, 0.9609026155786972, 0.9572192513368984, 0.3314814814814815],
					[-0.03468208092485549, Infinity, 1.10513444717721, 1, 0.8571428571428571, 0.75, 0.4516988855645181, 0.42857142857142855, 0.01634877384196185],
					[-0.003199007309589947, -0.10513444717721002, Infinity, 1, 0.3633802276324186, 0.22203094070331456, 0.07267604552648373, 0.06659781717253214, 0.0015786571609035579],
					[0, 0, 0, NaN, 0, 0, 0, 0, 0],
					[0.005555555555555556, 0.14285714285714285, 0.6366197723675814, 1, -Infinity, -1, -0.15915494309189535, -0.14285714285714285, -0.002777777777777778],
					[0.011049723756906077, 0.25, 0.7779690592966855, 1, 2, -Infinity, -0.3785595022158506, -0.3333333333333333, -0.005571030640668524],
					[0.039097384421302804, 0.5483011144354819, 0.9273239544735162, 1, 1.1591549430918953, 1.3785595022158506, -Infinity, -10.160485520355076, -0.02059044129271759],
					[0.0427807486631016, 0.5714285714285714, 0.9334021828274679, 1, 1.1428571428571428, 1.3333333333333333, 11.160485520355076, -Infinity, -0.0226628895184136],
					[0.6685185185185185, 0.9836512261580381, 0.9984213428390964, 1, 1.0027777777777778, 1.0055710306406684, 1.0205904412927176, 1.0226628895184136, -Infinity]
				],
				[
					[Infinity, 1.0404624277456647, 1.0088034710375764, 1.005586592178771, 1, 0.994475138121547, 0.9662707866154496, 0.9625668449197861, 0.3333333333333333],
					[-0.04046242774566474, Infinity, 1.289323521706745, 1.1666666666666667, 1, 0.875, 0.5269820331586045, 0.5, 0.01907356948228883],
					[-0.008803471037576482, -0.289323521706745, Infinity, 2.751938393884109, 1, 0.6110154703516573, 0.2, 0.18327309002596562, 0.004344367251870584],
					[-0.00558659217877095, -0.16666666666666666, -1.7519383938841089, Infinity, 1, 0.5, 0.13730256169841298, 0.125, 0.002770083102493075],
					[0, 0, 0, 0, NaN, 0, 0, 0, 0],
					[0.0055248618784530384, 0.125, 0.38898452964834274, 0.5, 1, -Infinity, -0.1892797511079253, -0.16666666666666666, -0.002785515320334262],
					[0.0337292133845503, 0.4730179668413956, 0.8, 0.8626974383015871, 1, 1.1892797511079254, -Infinity, -8.765424830310693, -0.017763320956726683],
					[0.0374331550802139, 0.5, 0.8167269099740344, 0.875, 1, 1.1666666666666667, 9.765424830310693, -Infinity, -0.019830028328611898],
					[0.6666666666666666, 0.9809264305177112, 0.9956556327481294, 0.997229916897507, 1, 1.0027855153203342, 1.0177633209567267, 1.019830028328612, -Infinity]
				],
				[
					[Infinity, 1.046242774566474, 1.014407934765563, 1.011173184357542, 1.0055555555555555, 1, 0.9716389576522022, 0.9679144385026738, 0.3351851851851852],
					[-0.046242774566473986, Infinity, 1.47351259623628, 1.3333333333333333, 1.1428571428571428, 1, 0.6022651807526908, 0.5714285714285714, 0.021798365122615803],
					[-0.014407934765563018, -0.47351259623628, Infinity, 4.503876787768218, 1.6366197723675813, 1, 0.32732395447351625, 0.29994836287939913, 0.00711007734283761],
					[-0.0111731843575419, -0.3333333333333333, -3.5038767877682178, Infinity, 2, 1, 0.27460512339682597, 0.25, 0.00554016620498615],
					[-0.005555555555555556, -0.14285714285714285, -0.6366197723675814, -1, Infinity, 1, 0.15915494309189535, 0.14285714285714285, 0.002777777777777778],
					[0, 0, 0, 0, 0, NaN, 0, 0, 0],
					[0.028361042347797804, 0.3977348192473092, 0.6726760455264837, 0.725394876603174, 0.8408450569081046, 1, -Infinity, -7.370364140266307, -0.014936200620735777],
					[0.03208556149732621, 0.42857142857142855, 0.7000516371206009, 0.75, 0.8571428571428571, 1, 8.370364140266307, -Infinity, -0.0169971671388102],
					[0.6648148148148149, 0.9782016348773842, 0.9928899226571624, 0.9944598337950139, 0.9972222222222222, 1, 1.0149362006207356, 1.0169971671388103, -Infinity]
				],
				[
					[Infinity, 1.0767814179605757, 1.0440173551878824, 1.040688186073629, 1.0349065850398866, 1.0291888691004398, 1, 0.996166766348554, 0.3449688616799622],
					[-0.07678141796057564, Infinity, 2.446617608533725, 2.2138642178632644, 1.8975979010256552, 1.6603981633974483, 1, 0.9487989505128276, 0.036193965414658275],
					[-0.04401735518788241, -1.446617608533725, Infinity, 13.759691969420544, 5, 3.0550773517582863, 1, 0.9163654501298281, 0.02172183625935292],
					[-0.04068818607362897, -1.2138642178632644, -12.759691969420544, Infinity, 7.283185307179586, 3.641592653589793, 1, 0.9103981633974483, 0.020175028551744006],
					[-0.03490658503988659, -0.8975979010256552, -4, -6.283185307179586, Infinity, 6.283185307179586, 1, 0.8975979010256552, 0.017453292519943295],
					[-0.029188869100439704, -0.6603981633974483, -2.0550773517582863, -2.641592653589793, -5.283185307179586, Infinity, 1, 0.880530884529931, 0.014716393613313611],
					[0, 0, 0, 0, 0, 0, NaN, 0, 0],
					[0.003833233651446063, 0.05120104948717241, 0.08363454987017188, 0.08960183660255172, 0.10240209897434482, 0.11946911547006896, 1, -Infinity, -0.0020306365235705772],
					[0.6550311383200379, 0.9638060345853418, 0.9782781637406471, 0.9798249714482561, 0.9825467074800568, 0.9852836063866864, 1, 1.0020306365235707, -Infinity]
				],
				[
					[Infinity, 1.0809248554913296, 1.0480347171334823, 1.0446927374301676, 1.038888888888889, 1.0331491712707181, 1.0038479838727172, 1, 0.34629629629629627],
					[-0.08092485549132948, Infinity, 2.57864704341349, 2.3333333333333335, 2, 1.75, 1.053964066317209, 1, 0.03814713896457766],
					[-0.04803471713348224, -1.57864704341349, Infinity, 15.015507151072871, 5.45633840657307, 3.3339071778900564, 1.0912676813146138, 1, 0.02370433788863977],
					[-0.0446927374301676, -1.3333333333333333, -14.015507151072871, Infinity, 8, 4, 1.0984204935873039, 1, 0.0221606648199446],
					[-0.03888888888888889, -1, -4.45633840657307, -7, Infinity, 7, 1.1140846016432675, 1, 0.019444444444444445],
					[-0.03314917127071823, -0.75, -2.3339071778900564, -3, -6, Infinity, 1.1356785066475519, 1, 0.016713091922005572],
					[-0.0038479838727171842, -0.053964066317208875, -0.09126768131461392, -0.0984204935873038, -0.11408460164326739, -0.13567850664755185, Infinity, 1, 0.002026521395209667],
					[0, 0, 0, 0, 0, 0, 0, NaN, 0],
					[0.6537037037037037, 0.9618528610354223, 0.9762956621113602, 0.9778393351800554, 0.9805555555555555, 0.9832869080779945, 0.9979734786047902, 1, -Infinity]
				],
				[
					[Infinity, 3.121387283236994, 3.026410413112729, 3.016759776536313, 3, 2.983425414364641, 2.898812359846349, 2.8877005347593583, 1],
					[-2.121387283236994, Infinity, 67.59739035233935, 61.166666666666664, 52.42857142857143, 45.875, 27.62891516702969, 26.214285714285715, 1],
					[-2.026410413112729, -66.59739035233935, Infinity, 633.4497601921632, 230.1831180523293, 140.64544614375504, 46.03662361046586, 42.186371317262015, 1],
					[-2.016759776536313, -60.166666666666664, -632.4497601921632, Infinity, 361, 180.5, 49.56622477312708, 45.125, 1],
					[-2, -51.42857142857143, -229.1831180523293, -360, Infinity, 360, 57.29577951308232, 51.42857142857143, 1],
					[-1.9834254143646408, -44.875, -139.64544614375504, -179.5, -359, Infinity, 67.95143064774518, 59.833333333333336, 1],
					[-1.898812359846349, -26.628915167029692, -45.03662361046586, -48.56622477312709, -56.29577951308233, -66.95143064774518, Infinity, 493.4564235856678, 1],
					[-1.8877005347593583, -25.214285714285715, -41.18637131726202, -44.125, -50.42857142857143, -58.833333333333336, -492.4564235856678, Infinity, 1],
					[0, 0, 0, 0, 0, 0, 0, 0, NaN]
				]
			];

			for(let i = 0; i < validTestData.length; i++) {
				for(let j = 0; j < validTestData.length; j++) {
					for(let k = 0; k < validTestData.length; k++) {
						if(isNaN(results[i][j][k])) {
							expect(extendedMath.normalize(validTestData[i], validTestData[j], validTestData[k])).to.be.NaN;
						}
						else {
							expect(extendedMath.normalize(validTestData[i], validTestData[j], validTestData[k])).to.equal(results[i][j][k]);
						}
					}
				}
			}
		});
	});
});
